type UserRecordAddendum = 
 record {
   firstname: ContactField;
   phone: ContactField;
   surname: ContactField;
 };
type UserRecord = 
 record {
   callerId: UserId;
   counter: Count;
   firstname: ContactField;
   phone: ContactField;
   surname: ContactField;
   timestamp: Timestamp;
 };
type UserId__1 = opt principal;
type UserId = opt principal;
type Timestamp__1 = int;
type Timestamp = int;
type Team = 
 record {
   creator: text;
   orders: OrderList;
   teamId: nat;
 };
type OrderList = vec nat;
type Order = 
 record {
   dealId: nat;
   orderId: nat;
   orderType: text;
   teamId: nat;
   units: nat;
   user: text;
 };
type GroupId = nat;
type Deal = 
 record {
   deadline: int;
   dealBanner: text;
   dealDescription: text;
   dealId: nat;
   dealTargetUnits: nat;
   productDescription: text;
   productName: text;
   retailPrice: nat;
   sellerLocality: text;
   sellerName: text;
   totalInventoryBalance: nat;
   unit: text;
   unitPrice: nat;
 };
type Count = nat;
type ContactField__1 = text;
type ContactField = text;
type ChatMessage = 
 record {
   body: text;
   from: principal;
   timestamp: Timestamp;
   toGroup: Count;
 };
service : {
  connect: (UserId__1) -> ();
  createGroup: (text) -> (nat);
  getConnections: (text) -> (vec UserRecord);
  getLatestDirectChats: (Timestamp__1) -> (vec ChatMessage);
  getLatestGroupChats: (Timestamp__1) -> (vec ChatMessage);
  getMyRecord: (text) -> (UserRecord);
  joinGroup: (GroupId) -> (bool);
  listDeals: () -> (vec Deal);
  listOrders: (nat) -> (vec Order);
  listTeams: (nat) -> (vec Team);
  listUsers: (text) -> (vec UserRecord);
  nameLogin: (ContactField__1) -> (UserRecord);
  putChat: (ChatMessage) -> (nat);
  registerLogin: () -> (UserRecord);
  updateUserRecord: (UserRecordAddendum) -> (bool);
}
